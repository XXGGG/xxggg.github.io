(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{509:function(t,o,v){"use strict";v.r(o);var s=v(4),_=Object(s.a)({},(function(){var t=this,o=t.$createElement,v=t._self._c||o;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"🔵-什么是【git-hook】"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#🔵-什么是【git-hook】"}},[t._v("#")]),t._v(" 🔵 什么是【git hook】")]),t._v(" "),v("blockquote",[v("p",[t._v("说白了就是钩子，就是执行了某些操作后会触发的脚本")])]),t._v(" "),v("p",[v("strong",[t._v("git hook 其实就是钩子")])]),t._v(" "),v("p",[t._v("特定事件发生之前或之后执行特定脚本代码功能（从概念上类比，就与监听事件、触发器之类的东西类似）"),v("br"),t._v("\nGit Hooks 就是那些在Git执行特定事件（如commit、push、receive等）后触发运行的脚本，挂钩是可以放置在挂钩目录中的程序，可在git执行的某些点触发动作。没有设置可执行位的钩子将被忽略。"),v("br"),t._v("\n默认情况下，hooks目录是$GIT_DIR/hooks，但是可以通过core.hooksPath配置变量来更改")]),t._v(" "),v("h2",{attrs:{id:"有啥用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#有啥用"}},[t._v("#")]),t._v(" 有啥用")]),t._v(" "),v("p",[t._v("用处大得很，简单来说，规避风险和偷懒，我们不想把时间花在找一个语法错误的bug上面，也不想做一些重复性的操作，比如 "),v("strong",[t._v("【持续集成】")])]),t._v(" "),v("p",[t._v("现在大部分的持续集成的构建环境，比如travis和jekkins基本上和git hook的原理有关系")]),t._v(" "),v("p",[t._v("Git Hooks是定制化的脚本程序，所以它实现的功能与相应的git动作相关,如下几个简单例子：")]),t._v(" "),v("ol",[v("li",[t._v("多人开发代码语法、规范强制统一")]),t._v(" "),v("li",[t._v("commit message 格式化、是否符合某种规范")]),t._v(" "),v("li",[t._v("如果有需要，测试用例的检测")]),t._v(" "),v("li",[t._v("服务器代码有新的更新的时候通知所有开发成员")]),t._v(" "),v("li",[t._v("代码提交后的项目自动打包（git receive之后） 等等...")])]),t._v(" "),v("p",[t._v("更多的功能可以按照生产环境的需求写出来")])])}),[],!1,null,null,null);o.default=_.exports}}]);