(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{532:function(a,e,t){"use strict";t.r(e);var r=t(4),s=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"🍓javascript-小笔记🍓"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🍓javascript-小笔记🍓"}},[a._v("#")]),a._v(" 🍓JavaScript 小笔记🍓")]),a._v(" "),t("p",[a._v("理解，常用，用于查阅。 （常用，但是经常忘记）用到才会查")]),a._v(" "),t("h2",{attrs:{id:"infinity-无限大"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#infinity-无限大"}},[a._v("#")]),a._v(" Infinity 无限大")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("Infinity\n-Infinity\n")])])]),t("h2",{attrs:{id:"字符串方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串方法"}},[a._v("#")]),a._v(" 字符串方法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("toUpperCase()       把一个字符串全部变为大写\ntoLowerCase()       把一个字符串全部变为小写\nindexOf()           会搜索指定字符串出现的位置： 没有找到会返回 -1 \nsubstring()         返回指定索引区间的子串\n")])])]),t("h2",{attrs:{id:"数组方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组方法"}},[a._v("#")]),a._v(" 数组方法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("slice()             它截取Array的部分元素\n\npush()              向Array的末尾添加若干元素，\npop()               则把Array的最后一个元素删除掉\n\nunshift()           往Array的头部添加若干元素，\nshift()             方法则把Array的第一个元素删掉返回第一个数组的元素\n\nsort()              对当前Array进行排序，修改当前Array的元素位置 按照默认顺序排序：\nreverse()           把整个Array的元素给掉个个，也就是反转：\nsplice()            方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素\n\nconcat()            方法把当前的Array和另一个Array连接起来，并返回一个新的Array\n\njoin()              方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串\n")])])]),t("h2",{attrs:{id:"map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[a._v("#")]),a._v(" map")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);\nm.get('Michael');           // 95\n\nvar m = new Map();          // 空Map\nm.set('Adam', 67);          // 添加新的key-value\nm.set('Bob', 59);\nm.has('Adam');              // 是否存在key 'Adam': true\nm.get('Adam');              // 67\nm.delete('Adam');           // 删除key 'Adam'\nm.get('Adam');              // undefined\n")])])]),t("h2",{attrs:{id:"set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[a._v("#")]),a._v(" set")]),a._v(" "),t("p",[a._v("'Set'和'Map'类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。"),t("br"),a._v("\n要创建一个Set，需要提供一个Array作为输入，或者直接创建一个空Set："),t("br"),a._v("\n通过add(key)方法可以添加元素到Set中，可以重复添加，但不会有效果：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("s.add(4);\ns;                  // Set {1, 2, 3, 4}\ns.add(4);\ns;                  // 仍然是 Set {1, 2, 3, 4}\n通过delete(key)方法可以删除元素：\n\nvar s = new Set([1, 2, 3]);\ns;                  // Set {1, 2, 3}\ns.delete(3);\ns;                  // Set {1, 2}\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);